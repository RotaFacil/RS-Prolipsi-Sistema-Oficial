name: Deploy automático

on:
  push:
    branches:
      - main        # roda sempre que você der push na branch main
  workflow_dispatch: # permite rodar manualmente pelo botão "Run workflow"

env:
  TARGET_BASE: /var/www/rsprolipsi
  APPS: "raiz admin escritorio api shopping studio walletpay"
  # nomes no PM2 (altere se quiser outros nomes)
  PM2_RAIZ: rs-raiz
  PM2_ADMIN: rs-admin
  PM2_ESCRITORIO: rs-escritorio
  PM2_API: rs-api
  PM2_SHOPPING: rs-shopping
  PM2_STUDIO: rs-studio
  PM2_WALLETPAY: rs-walletpay

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Baixar repositório
        uses: actions/checkout@v4

      # se quiser buildar no runner, descomente os 3 passos abaixo:
      # - name: Instalar Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '18'
      #
      # - name: Instalar dependências
      #   run: npm ci
      #
      # - name: Build (opcional, por projeto)
      #   run: |
      #     echo "Se você usar build por projeto, mova cada comando pra dentro do servidor no passo de SSH"

      - name: Preparar chave SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY_trae }}

      - name: Enviar código para a VPS (sem node_modules e .git)
        run: rsync -avz --exclude 'node_modules' --exclude '.git' ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/rsprolipsi/

      - name: Instalar dependências e reiniciar serviços no servidor
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOSSH'
            set -e
            
            # Garante que o PM2 use o diretório correto, mesmo em scripts não-interativos
            export PM2_HOME=${PM2_HOME:-/root/.pm2}
            TARGET_BASE="/var/www/rsprolipsi"

            # Garante que o PM2 esteja instalado
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "==> Instalando PM2 globalmente"
              sudo npm install -g pm2
            fi

            # Função para instalar dependências, buildar (se houver) e (re)iniciar um app com PM2
            process_app () {
              local PM2_NAME="$1"
              local APP_PATH="$2"
              local APP_DIR="$TARGET_BASE/$APP_PATH"

              if [ ! -d "$APP_DIR" ]; then
                echo "==> AVISO: Diretório do app '$PM2_NAME' não encontrado em '$APP_DIR'. Pulando."
                return
              fi

              echo "==> Processando app: $PM2_NAME"
              cd "$APP_DIR"
              
              # Instala dependências se houver um package.json
              if [ -f "package.json" ]; then
                echo "    -> Instalando dependências (npm ci)..."
                npm ci --only=production || (echo "npm ci falhou, tentando npm install" && npm install --only=production)
                
                # Executa o build se o script existir
                if npm run | grep -q " build"; then
                  echo "    -> Executando build (npm run build)..."
                  npm run build
                fi
              fi

              # Reinicia ou inicia o app com PM2
              if pm2 list | grep -q "$PM2_NAME"; then
                echo "    -> Reiniciando app com PM2..."
                pm2 reload "$PM2_NAME" --update-env
              else
                echo "    -> Iniciando app com PM2..."
                # Tenta usar o script 'start' do package.json
                if [ -f "package.json" ] && grep -q "\"start\"" "package.json"; then
                    pm2 start npm --name "$PM2_NAME" -- start
                else
                    echo "    -> AVISO: Não foi possível iniciar '$PM2_NAME'. Nenhum script 'start' encontrado no package.json."
                fi
              fi
            }

            # Mapeamento de Nomes PM2 para diretórios dos Apps
            # Adicione ou remova linhas conforme sua necessidade
            process_app "rs-raiz"       "apps/raiz"
            process_app "rs-admin"      "apps/admin"
            process_app "rs-escritorio" "apps/escritorio"
            process_app "rs-api"        "apps/api"
            process_app "rs-shop"       "apps/rsshop"
            process_app "rs-ia"         "apps/rsia"
            process_app "rs-walletpay"  "apps/rswalletpay"

            echo "==> Salvando o estado do PM2"
            pm2 save

            echo "==> Script de deploy no servidor finalizado."
          EOSSH
